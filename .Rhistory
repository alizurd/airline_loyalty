install.packages(tidyverse)
install.packages("tidyverse")
library(tidyvese)
library(tidyverse)
library(tidyverse)
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("ebird/ebirdst")
library(dyplr)
library(ebirdst)
install.packages("ebirdst")
library(ebirdst)
view(ebirdst_runs)
install.packages("tidyverse")
install.packages("openintro")
install.packages("openintro")
library(tidyverse)
library(openintro)
install.packages("janitor")
install.packages("lattice")
install.packages("pROC")
install.packages("party")
library(janitor)
library(moments)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caret)
library(pROC)
library(party)
setwd("/Users/alyssabueno/Desktop/airline_loyalty")
history <- read.csv("customer_loyalty_history.csv", stringsAsFactors = FALSE)
history <- read.csv("loyalty_history.csv", stringsAsFactors = FALSE)
View(history)
history <- clean_names(history) # change column names to lowercase and snakecase
history[is.na(history)] <- 0 # change NA to 0 or NULL
history$salary[is.na(history$salary)] <- median(history$salary, na.rm = TRUE) # change 0 salary values to median
history$postal_code <- gsub(" ", "", history$postal_code) # remove spaces from the postal codes
history <- history %>%
mutate(country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
postal_code = as.factor(postal_code),
gender = as.factor(gender),
education = as.factor(education),
marital_status = as.factor(marital_status),
loyalty_card = as.factor(loyalty_card),
enrollment_type = as.factor(enrollment_type))
# making columns numeric
str(history)
history$loyalty_number <- as.numeric(history$loyalty_number)
history$salary <- as.numeric(history$salary)
history$clv <- as.numeric(history$clv)
history$enrollment_year <- as.numeric(history$enrollment_year)
history$enrollment_month <- as.numeric(history$enrollment_month)
history$salary <- abs(history$salary) # changing the negative salary values positive
# at this point i want to download data and explore in bigquery
write.csv(history, "cleaned_loyalty.csv", na = "")
View(history)
# making columns numeric
str(history)
install.packages("janitor")
install.packages("lattice")
install.packages("pROC")
install.packages("party")
library(janitor)
library(moments)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caret)
library(pROC)
library(party)
setwd("/Users/alyssabueno/Desktop/airline_loyalty")
history <- read.csv("loyalty_history.csv", stringsAsFactors = FALSE)
history <- clean_names(history) # change column names to lowercase and snakecase
history[is.na(history)] <- 0 # change NA to 0 or NULL
history$salary[is.na(history$salary)] <- median(history$salary, na.rm = TRUE) # change 0 salary values to median
history$postal_code <- gsub(" ", "", history$postal_code) # remove spaces from the postal codes
history <- history %>%
mutate(country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
postal_code = as.factor(postal_code),
gender = as.factor(gender),
education = as.factor(education),
marital_status = as.factor(marital_status),
loyalty_card = as.factor(loyalty_card),
enrollment_type = as.factor(enrollment_type))
str(history)
history$loyalty_number <- as.numeric(history$loyalty_number)
history$salary <- as.numeric(history$salary)
history$clv <- as.numeric(history$clv)
history$enrollment_year <- as.numeric(history$enrollment_year)
history$enrollment_month <- as.numeric(history$enrollment_month)
history$salary <- abs(history$salary) # changing the negative salary values positive
View(history)
# at this point i want to download data and explore in bigquery
write.csv(history, "cleaned_loyalty.csv", na = "")
# now we will read and clean new data
flights <- read.csv("flight_activity.csv", stringsAsFactors = FALSE)
# changing column names
flights <- clean_names(flights)
View(flights)
flights$loyalty_number <- as.numeric(flights$loyalty_number)
flights$month <- as.numeric(flights$month)
flights$total_flights <- as.numeric(flights$total_flights)
flights$distance <- as.numeric(flights$distance)
flights$points_accumulated <- as.numeric(flights$points_accumulated)
flights$points_redeemed <- as.numeric(flights$points_redeemed)
flights$dollar_cost_points_redeemed <- as.numeric(flights$dollar_cost_points_redeemed)
flights$year <- as.numeric(flights$year)
flights <- flights %>%
filter(points_redeemed <= points_accumulated) # filter out rows where points_redeemed > points_accumulated
skew_points_accumulated <- skewness(flights$points_accumulated)
skew_points_redeemed <- skewness(flights$points_redeemed)
skew_dollar_cost_points_redeemed <- skewness(flights$dollar_cost_points_redeemed)
skew_distance <- skewness(flights$distance)
skew_total_flights <- skewness(flights$skew_total_flights)
# checking for skew
skew_points_accumulated <- skewness(flights$points_accumulated)
skew_points_redeemed <- skewness(flights$points_redeemed)
skew_dollar_cost_points_redeemed <- skewness(flights$dollar_cost_points_redeemed)
skew_distance <- skewness(flights$distance)
skew_total_flights <- skewness(flights$skew_total_flights)
# let's see what that looks like
flights$points_accumulated <- log1p(flights$points_accumulated)
flights$points_redeemed <- log1p(flights$points_redeemed)
flights$dollar_cost_points_redeemed <- log1p(flights$dollar_cost_points_redeemed)
flights$distance <- log1p(flights$distance)
# square root transformation on total_flights column
flights$total_flights <- sqrt(log1p(flights$total_flights))
View(flights)
common_ids <- intersect(history$loyalty_number, flights$loyalty_number)
View(common_ids)
print(common_ids)
nrow(flights)
389861/15737
15737/389861
nrow(flights)
nrow(history)
flights_common <- flights %>% filter(loyalty_number %in% common_ids)
View(flights_common)
View(history_common)
history_common <- history %>% filter(loyalty_number %in% common_ids)
View(history_common)
flights_unmatched <- flights %>% filter(!loyalty_number %in% history$loyalty_number)
history_unmatched <- history %>% filter(!loyalty_number %in% flights$loyalty_number)
nrow(flights_unmatched)
nrow(history_unmatched)
# check for duplicates in primary key
any(duplicated(flights$loyalty_number))
any(duplicated(history$loyalty_number))
# remove rows with missing join keys
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# check for duplicates in primary key
any(duplicated(flights$loyalty_number))
any(duplicated(history$loyalty_number))
View(flights)
flights %>% count(loyalty_number) %>% filter(n > 1)
# there are duplicates, so im dropping the month column and summing up the rest of the columns by loyalty_number
flights <- flights %>%
select(-month) %>%                             # Drop the 'month' column
group_by(loyalty_number) %>%                   # Group by unique ID
summarise(across(everything(), sum), .groups = "drop")  # Sum all numeric columns
View(flights)
# removing any NAs in loyalty_number
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# now join
joined <- inner_join(flights, history, by = "loyalty_number")
View(joined)
View(joined)
joined$year <- as.numeric(joined$year)
View(joined)
View(joined)
install.packages("janitor")
install.packages("lattice")
install.packages("pROC")
install.packages("party")
library(janitor)
library(moments)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caret)
library(pROC)
library(party)
setwd("/Users/alyssabueno/Desktop/airline_loyalty")
history <- read.csv("loyalty_history.csv", stringsAsFactors = FALSE)
flights <- read.csv("flight_activity.csv", stringsAsFactors = FALSE)
# change column names to lowercase and snakecase
history <- clean_names(history)
flights <- clean_names(flights)
# check to see if there are any unmatching rows before join
flights_unmatched <- flights %>% filter(!loyalty_number %in% history$loyalty_number)
history_unmatched <- history %>% filter(!loyalty_number %in% flights$loyalty_number)
nrow(flights_unmatched)
nrow(history_unmatched)
# remove rows with missing join keys
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# there are duplicates, so im dropping the month column and summing up the rest of the columns by loyalty_number
flights <- flights %>%
select(-month, -year) %>%                             # Drop the 'month' column
group_by(loyalty_number) %>%                   # Group by unique ID
summarise(across(everything(), sum), .groups = "drop")  # Sum all numeric columns
# Make sure it's the same type in both dataframes
flights$loyalty_number <- as.numeric(flights$loyalty_number)
history$loyalty_number <- as.numeric(history$loyalty_number)
# Remove whitespace, leading zeros, etc.
flights$loyalty_number <- trimws(flights$loyalty_number)
history$loyalty_number <- trimws(history$loyalty_number)
# removing any NAs in loyalty_number
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# now join
joined <- inner_join(flights, history, by = "loyalty_number")
View(joined)
# apply more transformations
joined[is.na(joined)] <- 0 # change NA to 0 or NULL
View(joined)
joined$postal_code <- gsub(" ", "", history$postal_code) # remove spaces from the postal codes
joined <- joined %>%
mutate(country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
postal_code = as.factor(postal_code),
gender = as.factor(gender),
education = as.factor(education),
marital_status = as.factor(marital_status),
loyalty_card = as.factor(loyalty_card),
enrollment_type = as.factor(enrollment_type))
str(joined)
joined$loyalty_number <- as.numeric(joined$loyalty_number)
joined$salary <- as.numeric(joined$salary)
joined$clv <- as.numeric(joined$clv)
joined$enrollment_year <- as.numeric(joined$enrollment_year)
joined$enrollment_month <- as.numeric(joined$enrollment_month)
joined$total_flights <- as.numeric(joined$total_flights)
joined$distance <- as.numeric(joined$distance)
joined$points_accumulated <- as.numeric(joined$points_accumulated)
joined$points_redeemed <- as.numeric(joined$points_redeemed)
joined$dollar_cost_points_redeemed <- as.numeric(joined$dollar_cost_points_redeemed)
joined$year <- as.numeric(joined$year)
# drop rows with 0
joined <- joined %>% drop_na()
View(joined)
joined <- joined %>%
filter (salary != 0) %>%
drop_na()
View(joined)
skew_salary <- skewness(joined$skew_salary)
skew_clv <- skewness(joined$skew_clv)
skew_total_flights <- skewness(joined$skew_total_flights)
(
# checking for skew
skew_points_accumulated <- skewness(joined$points_accumulated)
skew_points_redeemed <- skewness(joined$points_redeemed)
# checking for skew
skew_points_accumulated <- skewness(joined$points_accumulated)
skew_points_redeemed <- skewness(joined$points_redeemed)
skew_dollar_cost_points_redeemed <- skewness(joined$dollar_cost_points_redeemed)
skew_distance <- skewness(joined$distance)
skew_total_flights <- skewness(joined$skew_total_flights)
skew_clv <- skewness(joined$skew_clv)
joined$salary <- lop1p(joined$salary)
joined$clv <- log1p(joined$clv)
joined$salary <- log1p(joined$salary)
joined$points_accumulated <- log1p(joined$points_accumulated)
joined$points_redeemed <- log1p(joined$points_redeemed)
joined$dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
joined$distance <- log1p(joined$distance)
# square root transformation on total_flights column
joined$total_flights <- sqrt(log1p(joined$total_flights))
View(joined)
joined$salary <- as.numeric(joined$salary)
skew_salary <- skewness(joined$skew_salary) # returning errors - might need to investigate
# let's see what that looks like
joined$points_accumulated_t <- log1p(joined$points_accumulated)
# check visually - boxplots still look funky but it's okay, that's normal
ggplot(joined, aes(y=points_accumulated)) +
geom_boxplot()
# let's see what that looks like
joined$points_accumulated_t <- log1p(joined$points_accumulated)
# check visually - boxplots still look funky but it's okay, that's normal
ggplot(joined, aes(y=points_accumulated_t)) +
geom_boxplot()
joined$log_salary <- log1p(joined$salary) --returning error
joined$log_salary <- log1p(joined$salary)
# let's see what that looks like
joined$log_dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
# linear model
lm_model <- lm(joined$log_clv ~ joined$gender + joined$education + joined$marital_status + joined$loyalty_card
+ joined$enrollment_type + joined$log_salary + join$log_total_flights + joined$log_distance
+ joined$log_points_accumulated + joined$log_points_redeemed + joined$log_dollar_cost_points_redeemed
+ joined$enrollment_year + joined$cancellation_year)
joined$log_clv <- log1p(joined$clv)
# linear model
lm_model <- lm(joined$log_clv ~ joined$gender + joined$education + joined$marital_status + joined$loyalty_card
+ joined$enrollment_type + joined$log_salary + join$log_total_flights + joined$log_distance
+ joined$log_points_accumulated + joined$log_points_redeemed + joined$log_dollar_cost_points_redeemed
+ joined$enrollment_year + joined$cancellation_year)
# linear model
lm_model <- lm(joined$log_clv ~ joined$gender + joined$education + joined$marital_status + joined$loyalty_card
+ joined$enrollment_type + joined$log_salary + joined$log_total_flights + joined$log_distance
+ joined$log_points_accumulated + joined$log_points_redeemed + joined$log_dollar_cost_points_redeemed
+ joined$enrollment_year + joined$cancellation_year)
# linear model
model <- lm(
log_clv ~ gender + log_total_flights + log_distance +
log_points_accumulated + log_points_redeemed,
data = joined
)
# linear model
model <- lm(
log_clv ~ gender + sqrt_total_flights + log_distance +
log_points_accumulated + log_points_redeemed,
data = joined
)
# square root transformation on total_flights column
joined$sqrt_total_flights <- sqrt(log1p(joined$total_flights))
# linear model
model <- lm(
log_clv ~ gender + sqrt_total_flights + log_distance +
log_points_accumulated + log_points_redeemed,
data = joined
)
joined$log_dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
joined$log_points_accumulated <- log1p(joined$points_accumulated)
joined$log_points_redeemed <- log1p(joined$points_redeemed)
joined$log_dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
joined$log_distance <- log1p(joined$distance)
joined$log_salary <- log1p(joined$salary)
joined$log_clv <- log1p(joined$clv)
# linear model
model <- lm(
log_clv ~ gender + sqrt_total_flights + log_distance +
log_points_accumulated + log_points_redeemed,
data = joined
)
# model summary
summary(model)
history <- read.csv("loyalty_history.csv", stringsAsFactors = FALSE)
flights <- read.csv("flight_activity.csv", stringsAsFactors = FALSE)
# change column names to lowercase and snakecase
history <- clean_names(history)
flights <- clean_names(flights)
# check to see if there are any unmatching rows before join
flights_unmatched <- flights %>% filter(!loyalty_number %in% history$loyalty_number)
history_unmatched <- history %>% filter(!loyalty_number %in% flights$loyalty_number)
# remove rows with missing join keys
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# check for duplicates in primary key
any(duplicated(flights$loyalty_number))
any(duplicated(history$loyalty_number))
# there are duplicates in flights data, so im dropping the month + year and summing up the rest of the columns by loyalty_number
flights <- flights %>%
select(-month, -year) %>%                             # Drop the 'month' column
group_by(loyalty_number) %>%                   # Group by unique ID
summarise(across(everything(), sum), .groups = "drop")  # Sum all numeric columns
# Make sure it's the same type in both dataframes
flights$loyalty_number <- as.numeric(flights$loyalty_number)
history$loyalty_number <- as.numeric(history$loyalty_number)
# Remove whitespace, leading zeros, etc.
flights$loyalty_number <- trimws(flights$loyalty_number)
history$loyalty_number <- trimws(history$loyalty_number)
# removing any NAs in loyalty_number
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# now join
joined <- inner_join(flights, history, by = "loyalty_number")
View(joined)
# apply more transformations
joined[is.na(joined)] <- 0 # change NA to 0 or NULL
# drop rows with salary == 0
joined <- joined %>%
filter (salary != 0) %>%
drop_na()
joined$postal_code <- gsub(" ", "", history$postal_code) # remove spaces from the postal codes
joined <- joined %>%
mutate(country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
postal_code = as.factor(postal_code),
gender = as.factor(gender),
education = as.factor(education),
marital_status = as.factor(marital_status),
loyalty_card = as.factor(loyalty_card),
enrollment_type = as.factor(enrollment_type))
joined$loyalty_number <- as.numeric(joined$loyalty_number)
joined$salary <- as.numeric(joined$salary)
joined$clv <- as.numeric(joined$clv)
joined$enrollment_year <- as.numeric(joined$enrollment_year)
joined$enrollment_month <- as.numeric(joined$enrollment_month)
joined$total_flights <- as.numeric(joined$total_flights)
joined$distance <- as.numeric(joined$distance)
joined$points_accumulated <- as.numeric(joined$points_accumulated)
joined$points_redeemed <- as.numeric(joined$points_redeemed)
joined$dollar_cost_points_redeemed <- as.numeric(joined$dollar_cost_points_redeemed)
joined$cancellation_month <- as.numeric(joined$cancellation_month)
joined$cancellation_year <- as.numeric(joined$cancellation_year)
joined$salary <- abs(joined$salary) # changing the negative salary values positive
joined <- joined %>%
filter(points_redeemed <= points_accumulated) # filter out rows where points_redeemed > points_accumulated
joined$log_dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
joined$log_points_accumulated <- log1p(joined$points_accumulated)
joined$log_points_redeemed <- log1p(joined$points_redeemed)
joined$log_dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
joined$log_distance <- log1p(joined$distance)
joined$log_salary <- log1p(joined$salary)
joined$log_clv <- log1p(joined$clv)
joined$sqrt_total_flights <- sqrt(log1p(joined$total_flights))
model <- lm(
clv ~ gender + education + province + marital_status + loyalty_card + enrollment_type +
total_flights + distance + enrollment_year + cancellation_year + points_accumulated + points_redeemed,
data = joined
)
# model summary
summary(model)
# linear model
log_model <- lm(
log_clv ~ gender + sqrt_total_flights + log_distance +
log_points_accumulated + log_points_redeemed,
data = joined
)
# linear model
log_model <- lm(
clv ~ gender + education + province + marital_status + loyalty_card + enrollment_type +
total_flights + distance + enrollment_year + cancellation_year + points_accumulated + points_redeemed,
data = joined
)
summary(log_model)
# linear model
log_model <- lm(
clv ~ gender + education + marital_status + loyalty_card + enrollment_type +
total_flights + distance + enrollment_year + cancellation_year + points_accumulated + points_redeemed,
data = joined
)
summary(log_model)
# linear model
log_model <- lm(
clv ~ gender + education + marital_status + loyalty_card + enrollment_type +
total_flights + distance + enrollment_year + cancellation_year + points_accumulated + points_redeemed
+ salary,
data = joined
)
summary(log_model)
model <- lm(
clv ~ gender + education + province + marital_status + loyalty_card + enrollment_type +
total_flights + distance + enrollment_year + cancellation_year + points_accumulated + points_redeemed,
data = joined
)
# model summary
summary(model)
# lm with untransformed data
model <- lm(
clv ~ gender + education + province + marital_status + salary+ loyalty_card + enrollment_type +
total_flights + distance + enrollment_year + cancellation_year + points_accumulated + points_redeemed,
data = joined
)
# model summary
summary(model)
# lm with untransformed data
model <- lm(
clv ~ gender + education + province + marital_status + salary+ loyalty_card + enrollment_type +
total_flights + distance + enrollment_year + cancellation_year + points_accumulated + points_redeemed
+ cancellation_month + cancellation_year,
data = joined
)
# model summary
summary(model)
