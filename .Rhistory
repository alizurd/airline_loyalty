install.packages(tidyverse)
install.packages("tidyverse")
library(tidyvese)
library(tidyverse)
library(tidyverse)
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("ebird/ebirdst")
library(dyplr)
library(ebirdst)
install.packages("ebirdst")
library(ebirdst)
view(ebirdst_runs)
install.packages("tidyverse")
install.packages("openintro")
install.packages("openintro")
library(tidyverse)
library(openintro)
install.packages("janitor")
install.packages("lattice")
install.packages("pROC")
install.packages("party")
library(janitor)
library(moments)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(caret)
library(pROC)
library(party)
setwd("/Users/alyssabueno/Desktop/airline_loyalty")
history <- read.csv("loyalty_history.csv", stringsAsFactors = FALSE)
flights <- read.csv("flight_activity.csv", stringsAsFactors = FALSE)
# change column names to lowercase and snakecase
history <- clean_names(history)
flights <- clean_names(flights)
# check to see if there are any unmatching rows before join
flights_unmatched <- flights %>% filter(!loyalty_number %in% history$loyalty_number)
history_unmatched <- history %>% filter(!loyalty_number %in% flights$loyalty_number)
# remove rows with missing join keys
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# check for duplicates in primary key
any(duplicated(flights$loyalty_number))
any(duplicated(history$loyalty_number))
# there are multiple rows of customer data so i am counting unique month/ year combos, and years, and aggregating all other numeric cols
flights <- flights %>%
group_by(loyalty_number) %>% # group by loyalty_number
summarise(
total_months = n_distinct(paste(year, month)), # counts unique month/ year combos
total_years = n_distinct(year), # counts years
across(-c(month, year), sum, na.rm = TRUE),
.groups = "drop" # drop grouping
)
# Make sure it's the same type in both dataframes
flights$loyalty_number <- as.numeric(flights$loyalty_number)
history$loyalty_number <- as.numeric(history$loyalty_number)
View(flights)
View(flights)
# Make sure it's the same type in both dataframes
flights$loyalty_number <- as.numeric(flights$loyalty_number)
history$loyalty_number <- as.numeric(history$loyalty_number)
# Remove whitespace, leading zeros, etc.
flights$loyalty_number <- trimws(flights$loyalty_number)
history$loyalty_number <- trimws(history$loyalty_number)
# removing any NAs in loyalty_number
flights <- flights %>% filter(!is.na(loyalty_number))
history <- history %>% filter(!is.na(loyalty_number))
# now join
joined <- inner_join(flights, history, by = "loyalty_number")
View(joined)
# apply more transformations
joined[is.na(joined)] <- 0 # change NA to 0 or NULL
# drop rows with salary == 0
joined <- joined %>%
filter (salary != 0) %>%
drop_na()
joined$postal_code <- gsub(" ", "", joined$postal_code) # remove spaces from the postal codes
joined <- joined %>%
mutate(churned = ifelse(cancellation_year > 0, 1, 0))
joined <- joined %>%
mutate(country = as.factor(country),
province = as.factor(province),
city = as.factor(city),
postal_code = as.factor(postal_code),
gender = as.factor(gender),
education = as.factor(education),
marital_status = as.factor(marital_status),
loyalty_card = as.factor(loyalty_card),
enrollment_type = as.factor(enrollment_type))
joined <- joined %>%
mutate(loyalty_number = as.numeric(loyalty_number),
salary = as.numeric(salary),
clv = as.numeric(clv),
enrollment_year = as.numeric(enrollment_year),
enrollment_month = as.numeric(enrollment_month),
total_flights = as.numeric(total_flights),
distance = as.numeric(distance),
points_accumulated = as.numeric(points_accumulated),
points_redeemed = as.numeric(points_redeemed),
dollar_cost_points_redeemed = as.numeric(dollar_cost_points_redeemed),
cancellation_year = as.numeric(cancellation_year),
cancellation_month = as.numeric(cancellation_month),
churned = as.numeric(churned)
)
joined$salary <- abs(joined$salary) # changing the negative salary values positive
joined <- joined %>%
filter(points_redeemed <= points_accumulated) # filter out rows where points_redeemed > points_accumulated
joined$log_dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
joined$log_points_accumulated <- log1p(joined$points_accumulated)
joined$log_points_redeemed <- log1p(joined$points_redeemed)
joined$log_dollar_cost_points_redeemed <- log1p(joined$dollar_cost_points_redeemed)
joined$log_distance <- log1p(joined$distance)
joined$log_salary <- log1p(joined$salary)
joined$log_clv <- log1p(joined$clv)
# square root transformation on total_flights column
joined$sqrt_total_flights <- sqrt(log1p(joined$total_flights))
churn_model <- glm(churned ~ gender + education + salary + marital_status + loyalty_card + clv
+ enrollment_year + cancellation_year + total_flights + distance + points_accumulated + points_redeemed
+ dollar_cost_points_redeemed, data = joined,
family = binomial
)
table(joined$loyalty_card, joined$churned)
churn_model <- glm(churned ~ gender + education + salary + marital_status + loyalty_card + clv
+ enrollment_year + total_flights + distance + points_accumulated + points_redeemed
+ dollar_cost_points_redeemed, data = joined,
family = binomial
)
summary(churn_model)
table(Predicted = joined$predicted_class, Actual = joined$churned)
# Accuracy
mean(joined$predicted_class == joined$churned)
joined$predicted_prob <- predict(churn_model, type = "response")
joined$predicted_class <- ifelse(joined$predicted_prob > 0.5, 1, 0)
# Accuracy
table(Predicted = joined$predicted_class, Actual = joined$churned)
mean(joined$predicted_class == joined$churned)
